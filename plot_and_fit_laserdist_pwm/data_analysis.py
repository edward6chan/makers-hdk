# data analysis
# 	Fitting data of average laser distance measured vs pulse width sent to control hdk engine rpm's.
# 	This data is necessary to construct PID loops for pitch and roll

import os, csv, numpy as np, matplotlib.pyplot as plt

data_dir = "../data_read_and_plot/"
data_files = []
for f in os.listdir(data_dir):
	if f[-4:] == ".csv":
		data_files.append(f)


def Cut_Data(csv_data):
	"""Some csv files contain BNO & time data. Get rid of
	these so this code can address all files of data simultaneously"""
	relevant_headers = ["RPM", "Laser1", "Laser2", "Laser3", "S1", "S2", "S3"]
	for item in csv_data[0]:
		item_index = csv_data[0].index(item)
		if item not in relevant_headers: # unwanted column of data 
			for j in csv_data: # remove ith index from each item in the csv_data list
				if csv_data[0][item_index] == len(csv_data[0])-1:
					csv_data[csv_data.index(j)] = j[:item_index]
				else:
					csv_data[csv_data.index(j)] = j[:item_index] + j[item_index + 1:]
	return csv_data


def Change_Data_Types(csv_data):
	"""change data types from strings to int"""
	for i in range(1, len(csv_data)): # ignore headers
		for j in range(len(csv_data[i])):
			csv_data[i][j] = int(csv_data[i][j])
	return csv_data


cum_data = [["RPM", "Laser1", "Laser2", "Laser3"]] # cumulative data from all csv files
for data_file in data_files:
	with open(data_dir + data_file, 'r') as csv_file:
		csv_data = csv.reader(csv_file)
		csv_data = [i[:-1] for i in csv_data] # last item in each data point is empty due to main.go syntax
		for i in csv_data[1]:
			if i != "":
				break
		else: # if an entire row is null, delete it
			csv_data.pop(1)
	csv_data = Cut_Data(csv_data)
	csv_data = Change_Data_Types(csv_data)
	cum_data += csv_data[1:]

# Add the average of the 3 laser measurements to each data point
cum_data[0].append('Laser_avg')
for item in cum_data[1:]:
	laser_data = tuple(item[-3:])
	item.append(np.mean(laser_data))

###############################
# raw data
rpm_pulse_width = [item[0] for item in cum_data][1:]
avg_laser = [item[-1] for item in cum_data][1:]

x = np.arange(len(avg_laser))

# Plot raw data 
plt.subplot(311)
plt.scatter(x, avg_laser, color='r', s=25)
plt.ylabel('Avg Laser Distance Measurement')
plt.title("Avg Laser Distance Measurement")

###############################
# significant data set
#	data in region where a change in rpm affects hover height, 
#	pulse width <200; plateaus beyond there

sig_data = sorted([item for item in cum_data[1:] if item[0] < 200])

# remove a few blatant outliers
outliers = [] 
for item in sig_data:
	item_index = sig_data.index(item)
	if item[-1] > 413 and item[-1] < 425: # unphysically high laser distances reported at low rpm
		if item[0] < 173:
			outliers.append(item)
for item in outliers:
	sig_data.remove(item)

fit = np.polyfit([item[0] for item in sig_data], [item[-1] for item in sig_data], 3)
p = np.poly1d(fit)

print("sig data: %s" % (sig_data))
print("polyfit coeffs: %s" % fit)

# Plot significant data and fit line
plt.subplot(313) # (row col num), skip 312 for spacing
plt.scatter([item[0] for item in sig_data], [item[-1] for item in sig_data], color='r', s=25)
plt.plot([item[0] for item in sig_data], p([item[0] for item in sig_data]))
plt.xlabel('Pulse Width')
plt.ylabel('Avg Laser Distance Measurement')
plt.title("Avg Laser Distance Measurement vs RPM Pulse Width")
plt.show()



"""
$ data_analysis.py

sig data: [[161, 219, 300, 223, 247.33333333333334], [162, 219, 304, 219, 247.33333333333334], [162, 291, 319, 219, 276.33333333333331], [163, 223, 319, 221, 254.33333333333334], [163, 287, 323, 292, 300.66666666666669], [164, 220, 327, 224, 257.0], [164, 301, 337, 289, 309.0], [165, 288, 342, 290, 306.66666666666669], [165, 303, 343, 306, 317.33333333333331], [166, 294, 347, 299, 313.33333333333331], [166, 310, 350, 300, 320.0], [167, 305, 348, 302, 318.33333333333331], [167, 312, 352, 305, 323.0], [168, 315, 361, 317, 331.0], [168, 321, 362, 311, 331.33333333333331], [169, 318, 366, 329, 337.66666666666669], [169, 322, 369, 322, 337.66666666666669], [170, 330, 373, 327, 343.33333333333331], [170, 340, 381, 341, 354.0], [171, 327, 376, 338, 347.0], [171, 328, 378, 333, 346.33333333333331], [171, 338, 383, 337, 352.66666666666669], [171, 341, 379, 340, 353.33333333333331], [172, 327, 378, 342, 349.0], [172, 340, 390, 351, 360.33333333333331], [172, 342, 381, 332, 351.66666666666669], [172, 345, 388, 340, 357.66666666666669], [173, 338, 380, 338, 352.0], [173, 338, 384, 346, 356.0], [173, 339, 386, 339, 354.66666666666669], [173, 339, 389, 352, 360.0], [173, 339, 391, 352, 360.66666666666669], [173, 343, 393, 350, 362.0], [173, 344, 384, 345, 357.66666666666669], [173, 345, 390, 346, 360.33333333333331], [174, 340, 393, 347, 360.0], [174, 341, 387, 339, 355.66666666666669], [174, 343, 385, 341, 356.33333333333331], [174, 343, 394, 350, 362.33333333333331], [174, 347, 391, 348, 362.0], [174, 347, 394, 358, 366.33333333333331], [174, 348, 393, 342, 361.0], [174, 350, 393, 354, 365.66666666666669], [175, 339, 388, 348, 358.33333333333331], [175, 345, 393, 350, 362.66666666666669], [175, 346, 395, 352, 364.33333333333331], [175, 346, 397, 347, 363.33333333333331], [175, 347, 398, 348, 364.33333333333331], [175, 350, 393, 354, 365.66666666666669], [175, 350, 402, 350, 367.33333333333331], [175, 352, 395, 353, 366.66666666666669], [176, 343, 396, 359, 366.0], [176, 347, 400, 348, 365.0], [176, 354, 395, 354, 367.66666666666669], [176, 354, 403, 362, 373.0], [176, 354, 408, 360, 374.0], [176, 355, 404, 356, 371.66666666666669], [176, 355, 406, 352, 371.0], [176, 361, 412, 362, 378.33333333333331], [177, 352, 400, 353, 368.33333333333331], [177, 353, 409, 356, 372.66666666666669], [177, 354, 401, 361, 372.0], [177, 356, 400, 353, 369.66666666666669], [177, 357, 406, 356, 373.0], [177, 358, 406, 354, 372.66666666666669], [177, 359, 409, 363, 377.0], [177, 363, 410, 363, 378.66666666666669], [178, 358, 411, 360, 376.33333333333331], [178, 358, 412, 358, 376.0], [178, 359, 393, 363, 371.66666666666669], [178, 359, 406, 364, 376.33333333333331], [178, 359, 410, 372, 380.33333333333331], [178, 360, 408, 361, 376.33333333333331], [178, 361, 416, 359, 378.66666666666669], [178, 364, 417, 363, 381.33333333333331], [179, 359, 408, 356, 374.33333333333331], [179, 361, 405, 386, 384.0], [179, 362, 405, 359, 375.33333333333331], [179, 362, 416, 362, 380.0], [179, 367, 414, 367, 382.66666666666669], [179, 367, 418, 361, 382.0], [179, 369, 416, 366, 383.66666666666669], [179, 370, 418, 367, 385.0], [180, 363, 411, 359, 377.66666666666669], [180, 364, 410, 365, 379.66666666666669], [180, 364, 410, 368, 380.66666666666669], [180, 365, 409, 369, 381.0], [180, 366, 420, 368, 384.66666666666669], [180, 368, 408, 372, 382.66666666666669], [180, 369, 418, 370, 385.66666666666669], [180, 369, 419, 363, 383.66666666666669], [180, 370, 417, 371, 386.0], [181, 362, 416, 369, 382.33333333333331], [181, 367, 413, 374, 384.66666666666669], [181, 367, 418, 367, 384.0], [181, 368, 416, 372, 385.33333333333331], [181, 368, 419, 370, 385.66666666666669], [181, 369, 421, 384, 391.33333333333331], [181, 370, 424, 373, 389.0], [181, 371, 416, 370, 385.66666666666669], [181, 372, 415, 373, 386.66666666666669], [182, 370, 413, 367, 383.33333333333331], [182, 370, 426, 374, 390.0], [182, 371, 421, 372, 388.0], [182, 371, 428, 385, 394.66666666666669], [182, 374, 416, 372, 387.33333333333331], [182, 374, 428, 373, 391.66666666666669], [182, 375, 419, 372, 388.66666666666669], [182, 375, 423, 374, 390.66666666666669], [182, 377, 414, 379, 390.0], [182, 386, 407, 392, 395.0], [183, 369, 420, 372, 387.0], [183, 370, 422, 379, 390.33333333333331], [183, 372, 423, 372, 389.0], [183, 373, 423, 375, 390.33333333333331], [183, 374, 424, 372, 390.0], [183, 376, 426, 384, 395.33333333333331], [183, 377, 412, 384, 391.0], [183, 377, 425, 396, 399.33333333333331], [183, 377, 426, 379, 394.0], [183, 378, 423, 372, 391.0], [184, 372, 426, 384, 394.0], [184, 373, 420, 377, 390.0], [184, 376, 424, 377, 392.33333333333331], [184, 376, 426, 381, 394.33333333333331], [184, 376, 429, 372, 392.33333333333331], [184, 377, 429, 385, 397.0], [184, 378, 428, 386, 397.33333333333331], [184, 380, 421, 382, 394.33333333333331], [184, 380, 423, 384, 395.66666666666669], [184, 381, 423, 378, 394.0], [185, 375, 421, 374, 390.0], [185, 375, 429, 380, 394.66666666666669], [185, 376, 427, 381, 394.66666666666669], [185, 377, 421, 378, 392.0], [185, 377, 429, 377, 394.33333333333331], [185, 379, 430, 393, 400.66666666666669], [185, 380, 426, 377, 394.33333333333331], [185, 380, 432, 383, 398.33333333333331], [185, 381, 430, 385, 398.66666666666669], [185, 382, 419, 387, 396.0], [186, 376, 433, 389, 399.33333333333331], [186, 378, 427, 382, 395.66666666666669], [186, 378, 430, 387, 398.33333333333331], [186, 379, 428, 380, 395.66666666666669], [186, 379, 435, 385, 399.66666666666669], [186, 380, 427, 385, 397.33333333333331], [186, 381, 427, 400, 402.66666666666669], [186, 381, 431, 391, 401.0], [186, 381, 433, 382, 398.66666666666669], [186, 382, 422, 377, 393.66666666666669], [187, 377, 428, 387, 397.33333333333331], [187, 379, 433, 380, 397.33333333333331], [187, 381, 431, 385, 399.0], [187, 381, 434, 379, 398.0], [187, 382, 438, 388, 402.66666666666669], [187, 383, 426, 391, 400.0], [187, 383, 427, 386, 398.66666666666669], [187, 384, 431, 386, 400.33333333333331], [187, 386, 434, 391, 403.66666666666669], [187, 387, 436, 385, 402.66666666666669], [188, 378, 435, 387, 400.0], [188, 382, 429, 383, 398.0], [188, 382, 440, 388, 403.33333333333331], [188, 384, 429, 386, 399.66666666666669], [188, 384, 438, 388, 403.33333333333331], [188, 385, 433, 393, 403.66666666666669], [188, 385, 438, 387, 403.33333333333331], [188, 387, 434, 395, 405.33333333333331], [188, 389, 437, 393, 406.33333333333331], [188, 390, 436, 387, 404.33333333333331], [189, 384, 435, 388, 402.33333333333331], [189, 384, 437, 388, 403.0], [189, 385, 437, 390, 404.0], [189, 385, 439, 389, 404.33333333333331], [189, 386, 433, 390, 403.0], [189, 387, 436, 386, 403.0], [189, 388, 426, 388, 400.66666666666669], [189, 389, 443, 391, 407.66666666666669], [189, 390, 430, 399, 406.33333333333331], [189, 390, 440, 389, 406.33333333333331], [190, 383, 437, 388, 402.66666666666669], [190, 387, 436, 390, 404.33333333333331], [190, 387, 438, 390, 405.0], [190, 388, 439, 392, 406.33333333333331], [190, 389, 434, 394, 405.66666666666669], [190, 389, 442, 396, 409.0], [190, 390, 442, 391, 407.66666666666669], [190, 390, 449, 398, 412.33333333333331], [190, 391, 435, 390, 405.33333333333331], [190, 393, 433, 402, 409.33333333333331], [191, 388, 439, 390, 405.66666666666669], [191, 388, 440, 396, 408.0], [191, 388, 444, 392, 408.0], [191, 388, 445, 394, 409.0], [191, 389, 438, 393, 406.66666666666669], [191, 389, 445, 393, 409.0], [191, 391, 432, 398, 407.0], [191, 392, 442, 394, 409.33333333333331], [191, 394, 439, 394, 409.0], [191, 394, 443, 392, 409.66666666666669], [192, 389, 447, 390, 408.66666666666669], [192, 390, 446, 396, 410.66666666666669], [192, 391, 439, 392, 407.33333333333331], [192, 391, 444, 395, 410.0], [192, 392, 444, 390, 408.66666666666669], [192, 393, 442, 399, 411.33333333333331], [192, 394, 443, 400, 412.33333333333331], [192, 394, 447, 399, 413.33333333333331], [192, 395, 447, 401, 414.33333333333331], [192, 396, 448, 395, 413.0], [193, 389, 448, 392, 409.66666666666669], [193, 392, 444, 397, 411.0], [193, 392, 445, 395, 410.66666666666669], [193, 393, 447, 397, 412.33333333333331], [193, 393, 450, 395, 412.66666666666669], [193, 394, 454, 394, 414.0], [193, 396, 447, 399, 414.0], [193, 397, 446, 393, 412.0], [193, 397, 446, 398, 413.66666666666669], [193, 398, 450, 394, 414.0], [194, 392, 448, 397, 412.33333333333331], [194, 394, 445, 399, 412.66666666666669], [194, 394, 454, 400, 416.0], [194, 395, 449, 397, 413.66666666666669], [194, 395, 453, 406, 418.0], [194, 396, 447, 395, 412.66666666666669], [194, 397, 450, 400, 415.66666666666669], [194, 397, 457, 398, 417.33333333333331], [194, 398, 442, 407, 415.66666666666669], [194, 398, 452, 401, 417.0], [195, 394, 450, 402, 415.33333333333331], [195, 395, 451, 401, 415.66666666666669], [195, 396, 448, 397, 413.66666666666669], [195, 396, 456, 399, 417.0], [195, 397, 444, 406, 415.66666666666669], [195, 397, 448, 401, 415.33333333333331], [195, 397, 449, 406, 417.33333333333331], [195, 397, 450, 399, 415.33333333333331], [195, 398, 454, 403, 418.33333333333331], [195, 403, 448, 409, 420.0], [196, 395, 455, 399, 416.33333333333331], [196, 396, 444, 401, 413.66666666666669], [196, 396, 456, 401, 417.66666666666669], [196, 396, 458, 405, 419.66666666666669], [196, 397, 455, 398, 416.66666666666669], [196, 399, 443, 407, 416.33333333333331], [196, 400, 451, 406, 419.0], [196, 400, 452, 401, 417.66666666666669], [196, 400, 454, 403, 419.0], [196, 402, 453, 404, 419.66666666666669], [197, 399, 447, 400, 415.33333333333331], [197, 399, 452, 407, 419.33333333333331], [197, 399, 453, 406, 419.33333333333331], [197, 400, 450, 400, 416.66666666666669], [197, 400, 453, 404, 419.0], [197, 400, 454, 405, 419.66666666666669], [197, 400, 457, 406, 421.0], [197, 401, 456, 401, 419.33333333333331], [197, 402, 456, 402, 420.0], [197, 403, 458, 405, 422.0], [198, 397, 448, 401, 415.33333333333331], [198, 399, 451, 406, 418.66666666666669], [198, 400, 451, 403, 418.0], [198, 400, 453, 405, 419.33333333333331], [198, 401, 455, 403, 419.66666666666669], [198, 401, 456, 406, 421.0], [198, 401, 456, 407, 421.33333333333331], [198, 402, 460, 403, 421.66666666666669], [198, 404, 455, 409, 422.66666666666669], [198, 404, 456, 404, 421.33333333333331], [199, 398, 452, 404, 418.0], [199, 399, 448, 402, 416.33333333333331], [199, 399, 452, 404, 418.33333333333331], [199, 400, 447, 403, 416.66666666666669], [199, 400, 450, 402, 417.33333333333331], [199, 400, 452, 406, 419.33333333333331], [199, 400, 457, 403, 420.0], [199, 401, 450, 410, 420.33333333333331], [199, 401, 457, 403, 420.33333333333331], [199, 404, 458, 407, 423.0]]
polyfit coeffs: [  3.86129121e-03  -2.20573330e+00   4.21678807e+02  -2.65708094e+04]
[Finished in 2.4s]
"""